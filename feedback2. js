import React, { useState, useEffect } from 'react';
import { Tabs, Tab, Button } from '@mui/material';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

const App = () => {
  const [tabValue, setTabValue] = useState(0);
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  
  const tabs = [
    { label: 'Tab 1', value: 0 },
    { label: 'Tab 2', value: 1 },
    // Add more tabs as needed
  ];

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  useEffect(() => {
    // Fetch data based on tabValue
    axios.post('/api/endpoint', { tabValue })
      .then(response => {
        setRowData(response.data.rowData);  // Adjust based on your API response
        setColumnDefs(response.data.columnDefs);  // Adjust based on your API response
      })
      .catch(error => console.error(error));
  }, [tabValue]);

  const handleExport = (format) => {
    const exportParams = {
      fileName: `export.${format}`
    };

    switch (format) {
      case 'csv':
        gridOptions.api.exportDataAsCsv(exportParams);
        break;
      case 'xlsx':
        gridOptions.api.exportDataAsExcel(exportParams);
        break;
      case 'json':
        const data = gridOptions.api.getDataAsCsv();  // Example for CSV
        // Convert CSV data to JSON (implement conversion as needed)
        // Download or handle JSON data
        break;
      default:
        break;
    }
  };

  const handleClearFilters = () => {
    gridOptions.api.setFilterModel(null);
  };

  const gridOptions = {
    pagination: true,
    paginationPageSize: 10,
    defaultColDef: {
      sortable: true,
      filter: true,
      resizable: true,
    },
    onGridReady: params => {
      params.api.sizeColumnsToFit();
    },
    domLayout: 'autoHeight',
    rowData: rowData,
    columnDefs: columnDefs,
    enableBrowserTooltips: true,
  };

  return (
    <div>
      <Tabs value={tabValue} onChange={handleTabChange} aria-label="dynamic tabs">
        {tabs.map((tab) => (
          <Tab key={tab.value} label={tab.label} />
        ))}
      </Tabs>
      
      <Button onClick={() => handleExport('csv')}>Export CSV</Button>
      <Button onClick={() => handleExport('xlsx')}>Export XLSX</Button>
      <Button onClick={() => handleExport('json')}>Export JSON</Button>
      <Button onClick={handleClearFilters}>Clear Filters</Button>
      
      <div className="ag-theme-alpine" style={{ height: 400, width: '100%' }}>
        <AgGridReact {...gridOptions} />
      </div>
    </div>
  );
};

export default App;