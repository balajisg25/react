import React, { useEffect, useMemo, useState } from 'react';
import {
  useReactTable,
  getCoreRowModel,
  getFilteredRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  flexRender,
} from '@tanstack/react-table';
import axios from 'axios';
import { saveAs } from 'file-saver';
import * as XLSX from 'xlsx';
import Papa from 'papaparse';
import { FaFileCsv, FaFileExcel, FaFileAlt, FaDownload } from 'react-icons/fa';

const DynamicTable = () => {
  const [data, setData] = useState([]);
  const [columns, setColumns] = useState([]);

  useEffect(() => {
    // Fetch data from an API
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        setData(response.data);
        setColumns(Object.keys(response.data[0]).map(key => ({
          Header: key,
          accessorKey: key,
        })));
      });
  }, []);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: { pagination: { pageSize: 10 } },
  });

  const exportToCSV = () => {
    const csv = Papa.unparse(data);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'data.csv');
  };

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Data');
    XLSX.writeFile(wb, 'data.xlsx');
  };

  const exportToJson = () => {
    const json = JSON.stringify(data, null, 2);
    const blob = new Blob([json], { type: 'application/json;charset=utf-8;' });
    saveAs(blob, 'data.json');
  };

  return (
    <div>
      <div style={{ marginBottom: '10px' }}>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer', marginRight: '10px' }}
          onClick={exportToCSV}
          title="Export to CSV"
        >
          <FaFileCsv size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer', marginRight: '10px' }}
          onClick={exportToExcel}
          title="Export to Excel"
        >
          <FaFileExcel size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer' }}
          onClick={exportToJson}
          title="Export to JSON"
        >
          <FaFileAlt size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
      </div>
      <div style={{ overflowX: 'auto' }}>
        <table {...table.getTableProps()} style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            {table.getHeaderGroups().map(headerGroup => (
              <tr key={headerGroup.id} {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map(column => (
                  <th key={column.id} {...column.getHeaderProps()} style={{ border: '1px solid black', padding: '8px' }}>
                    {flexRender(column.columnDef.header, column.getContext())}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody {...table.getTableBodyProps()}>
            {table.getRowModel().rows.map(row => (
              <tr key={row.id} {...row.getRowProps()}>
                {row.getVisibleCells().map(cell => (
                  <td key={cell.id} {...cell.getCellProps()} style={{ border: '1px solid black', padding: '8px' }}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div>
        <button onClick={() => table.setPageIndex(0)} disabled={!table.getCanPreviousPage()}>
          {'<<'}
        </button>
        <button onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>
          {'<'}
        </button>
        <button onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>
          {'>'}
        </button>
        <button onClick={() => table.setPageIndex(table.getPageCount() - 1)} disabled={!table.getCanNextPage()}>
          {'>>'}
        </button>
        <span>
          Page{' '}
          <strong>
            {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
          </strong>
        </span>
        <select
          value={table.getState().pagination.pageSize}
          onChange={e => table.setPageSize(Number(e.target.value))}
        >
          {[10, 20, 30, 40, 50].map(pageSize => (
            <option key={pageSize} value={pageSize}>
              Show {pageSize}
            </option>
          ))}
        </select>
      </div>
      <div>
        <div>
          <input
            type="checkbox"
            {...table.getToggleAllColumnsVisibilityProps()}
          />
          Toggle All
        </div>
        {table.getAllLeafColumns().map(column => (
          <div key={column.id}>
            <label>
              <input type="checkbox" {...column.getToggleVisibilityProps()} />{' '}
              {column.id}
            </label>
          </div>
        ))}
      </div>
    </div>
  );
};

export default DynamicTable;