/* Custom Styles for the DynamicTable component */

/* Set a compact style for the ag-Grid table */
.ag-theme-alpine.compact-table {
  font-size: 12px; /* Smaller font size for a more compact look */
}

.ag-theme-alpine.compact-table .ag-header-cell {
  padding: 4px 8px; /* Reduce padding for header cells */
}

.ag-theme-alpine.compact-table .ag-cell {
  padding: 4px 8px; /* Reduce padding for regular cells */
  line-height: 20px; /* Ensure text fits well in the smaller cells */
}

.ag-theme-alpine.compact-table .ag-header {
  height: 32px; /* Adjust header height to be compact */
}

.ag-theme-alpine.compact-table .ag-row {
  min-height: 25px; /* Adjust row height to be compact */
}

.ag-theme-alpine.compact-table .ag-paging-panel {
  padding: 4px; /* Compact the pagination controls */
}

.ag-theme-alpine.compact-table .ag-row-hover {
  background-color: #f0f0f0; /* Light background for hovered rows */
}

.ag-theme-alpine.compact-table .ag-cell-focus {
  border-color: #3f51b5; /* Focused cell border color */
}

/* Style for the export icon and menu items */
#export-menu .MuiMenuItem-root {
  font-size: 14px; /* Slightly smaller font for export menu items */
}

#export-menu .MuiSvgIcon-root {
  font-size: 18px; /* Adjust icon size for better alignment */
}

/* Optional: Add a custom scrollbar style */
.ag-theme-alpine.compact-table ::-webkit-scrollbar {
  width: 8px;
}

.ag-theme-alpine.compact-table ::-webkit-scrollbar-thumb {
  background-color: #888;
  border-radius: 4px;
}

.ag-theme-alpine.compact-table ::-webkit-scrollbar-thumb:hover {
  background-color: #555;
}



 import React, { useEffect, useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { IconButton, Menu, MenuItem, Tooltip, CircularProgress, Typography } from '@mui/material';
import { Download as DownloadIcon, FileCsv as FileCsvIcon, FileExcel as FileExcelIcon, FileCopy as FileCopyIcon } from '@mui/icons-material';
import './custom-styles.css'; // Import the custom CSS file

const DynamicTable = () => {
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [anchorEl, setAnchorEl] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const open = Boolean(anchorEl);

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        const fetchedData = response.data;
        setRowData(fetchedData);

        const columns = Object.keys(fetchedData[0] || {}).map((key, index) => ({
          headerName: key || `Column ${index}`,
          field: key || `column_${index}`, // Field must be unique
          filter: true, // Enable filtering for this column
        }));

        setColumnDefs(columns);
        setLoading(false);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setError('Failed to load data. Please try again later.');
        setLoading(false);
      });
  }, []);

  const onGridReady = (params) => {
    setGridApi(params.api);
    params.api.paginationSetPageSize(paginationPageSize);
    autoSizeAllColumns(params.columnApi); // Auto-size columns based on their content
  };

  const autoSizeAllColumns = (columnApi) => {
    const allColumnIds = columnApi.getAllColumns().map(column => column.getId());
    columnApi.autoSizeColumns(allColumnIds); // Automatically size all columns based on content
  };

  const onPageSizeChanged = (event) => {
    const newPageSize = Number(event.target.value);
    setPaginationPageSize(newPageSize);
    if (gridApi) {
      gridApi.paginationSetPageSize(newPageSize);
      updateTableHeight(newPageSize);
    }
  };

  const updateTableHeight = (pageSize) => {
    const rowHeight = 25; // Adjust based on your row height
    const headerHeight = 32; // Adjust based on your header height
    const paginationControlsHeight = 52; // Adjust based on your pagination controls height
    const totalHeight = (pageSize * rowHeight) + headerHeight + paginationControlsHeight;
    document.querySelector('.ag-theme-alpine').style.height = `${totalHeight}px`;
  };

  const getFilteredData = () => {
    if (gridApi) {
      const filteredData = [];
      gridApi.forEachNodeAfterFilterAndSort(node => filteredData.push(node.data));
      return filteredData;
    }
    return rowData;
  };

  const getFormattedDate = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
  };

  const exportToCSV = () => {
    const data = getFilteredData();
    const csv = Papa.unparse(data);
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.csv`;
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, filename);
  };

  const exportToExcel = () => {
    const data = getFilteredData();
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Data');
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.xlsx`;
    XLSX.writeFile(wb, filename);
  };

  const exportToJson = () => {
    const data = getFilteredData();
    const json = JSON.stringify(data, null, 2);
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.json`;
    const blob = new Blob([json], { type: 'application/json;charset=utf-8;' });
    saveAs(blob, filename);
  };

  const handleExport = (format) => {
    switch (format) {
      case 'csv':
        exportToCSV();
        break;
      case 'excel':
        exportToExcel();
        break;
      case 'json':
        exportToJson();
        break;
      default:
        break;
    }
    setAnchorEl(null);
  };

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <div>
      <Tooltip title="Export Data">
        <IconButton
          aria-controls={open ? 'export-menu' : undefined}
          aria-haspopup="true"
          onClick={(event) => setAnchorEl(event.currentTarget)}
          color="primary"
        >
          <DownloadIcon />
        </IconButton>
      </Tooltip>
      <Menu
        id="export-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={() => setAnchorEl(null)}
      >
        <MenuItem onClick={() => handleExport('csv')}>
          <FileCsvIcon style={{ marginRight: 8 }} />
          Export to CSV
        </MenuItem>
        <MenuItem onClick={() => handleExport('excel')}>
          <FileExcelIcon style={{ marginRight: 8 }} />
          Export to Excel
        </MenuItem>
        <MenuItem onClick={() => handleExport('json')}>
          <FileCopyIcon style={{ marginRight: 8 }} />
          Export to JSON
        </MenuItem>
      </Menu>
      <div className="ag-theme-alpine compact-table" style={{ width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          pagination
          paginationPageSize={paginationPageSize}
          onGridReady={onGridReady}
          onFilterChanged={() => {
            gridApi && gridApi.paginationGoToFirstPage();
            gridApi && autoSizeAllColumns(gridApi.columnApi); // Refit columns after filtering
          }} 
          defaultColDef={{
            resizable: true,
            sortable: true,
            filter: true,
            editable: true,
            clipboard: true, // Enable clipboard support
          }}
          suppressClipboardPaste={false}
          enableCellTextSelection={true} // Enable text selection for copy-paste
          domLayout='autoHeight' // Auto height based on content
          rowHeight={25} // Set a compact row height
          headerHeight={32} // Set a compact header height
        />
      </div>
      <div style={{ marginTop: '10px' }}>
        <span>
          Page{' '}
          <strong>
            {gridApi ? gridApi.paginationGetCurrentPage() + 1 : 1} of {gridApi ? gridApi.paginationGetTotalPages() : 1}
          </strong>
        </span>
        <select
          value={paginationPageSize}
          onChange={onPageSizeChanged}
          style={{ marginLeft: '10px' }}
        >
          {[10, 20, 30, 40, 50].map(pageSize => (
            <option key={pageSize} value={pageSize}>
              Show {pageSize}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default DynamicTable;


//modefied code

import React, { useEffect, useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { IconButton, Menu, MenuItem, Tooltip, CircularProgress, Typography } from '@mui/material';
import { Download as DownloadIcon, FileCsv as FileCsvIcon, FileExcel as FileExcelIcon, FileCopy as FileCopyIcon } from '@mui/icons-material';
import './custom-styles.css'; // Import the custom CSS file

const DynamicTable = () => {
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [gridColumnApi, setGridColumnApi] = useState(null);
  const [anchorEl, setAnchorEl] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const open = Boolean(anchorEl);

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        const fetchedData = response.data;
        setRowData(fetchedData);

        const columns = Object.keys(fetchedData[0] || {}).map((key, index) => ({
          headerName: key || `Column ${index}`,
          field: key || `column_${index}`, // Field must be unique
          filter: true, // Enable filtering for this column
        }));

        setColumnDefs(columns);
        setLoading(false);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setError('Failed to load data. Please try again later.');
        setLoading(false);
      });
  }, []);

  const onGridReady = (params) => {
    setGridApi(params.api);
    setGridColumnApi(params.columnApi);
    params.api.paginationSetPageSize(paginationPageSize);

    // Only call autoSizeAllColumns if columnApi is defined
    if (params.columnApi) {
      autoSizeAllColumns(params.columnApi);
    }
  };

  const autoSizeAllColumns = (columnApi) => {
    if (columnApi) {
      const allColumnIds = columnApi.getAllDisplayedColumns().map(column => column.getColId());
      columnApi.autoSizeColumns(allColumnIds); // Automatically size all columns based on content
    }
  };

  const onPageSizeChanged = (event) => {
    const newPageSize = Number(event.target.value);
    setPaginationPageSize(newPageSize);
    if (gridApi) {
      gridApi.paginationSetPageSize(newPageSize);
      updateTableHeight(newPageSize);
    }
  };

  const updateTableHeight = (pageSize) => {
    const rowHeight = 25; // Adjust based on your row height
    const headerHeight = 32; // Adjust based on your header height
    const paginationControlsHeight = 52; // Adjust based on your pagination controls height
    const totalHeight = (pageSize * rowHeight) + headerHeight + paginationControlsHeight;
    document.querySelector('.ag-theme-alpine').style.height = `${totalHeight}px`;
  };

  const getFilteredData = () => {
    if (gridApi) {
      const filteredData = [];
      gridApi.forEachNodeAfterFilterAndSort(node => filteredData.push(node.data));
      return filteredData;
    }
    return rowData;
  };

  const getFormattedDate = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
  };

  const exportToCSV = () => {
    const data = getFilteredData();
    const csv = Papa.unparse(data);
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.csv`;
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, filename);
  };

  const exportToExcel = () => {
    const data = getFilteredData();
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Data');
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.xlsx`;
    XLSX.writeFile(wb, filename);
  };

  const exportToJson = () => {
    const data = getFilteredData();
    const json = JSON.stringify(data, null, 2);
    const formattedDate = getFormattedDate();
    const filename = `data_${formattedDate}.json`;
    const blob = new Blob([json], { type: 'application/json;charset=utf-8;' });
    saveAs(blob, filename);
  };

  const handleExport = (format) => {
    switch (format) {
      case 'csv':
        exportToCSV();
        break;
      case 'excel':
        exportToExcel();
        break;
      case 'json':
        exportToJson();
        break;
      default:
        break;
    }
    setAnchorEl(null);
  };

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <div>
      <Tooltip title="Export Data">
        <IconButton
          aria-controls={open ? 'export-menu' : undefined}
          aria-haspopup="true"
          onClick={(event) => setAnchorEl(event.currentTarget)}
          color="primary"
        >
          <DownloadIcon />
        </IconButton>
      </Tooltip>
      <Menu
        id="export-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={() => setAnchorEl(null)}
      >
        <MenuItem onClick={() => handleExport('csv')}>
          <FileCsvIcon style={{ marginRight: 8 }} />
          Export to CSV
        </MenuItem>
        <MenuItem onClick={() => handleExport('excel')}>
          <FileExcelIcon style={{ marginRight: 8 }} />
          Export to Excel
        </MenuItem>
        <MenuItem onClick={() => handleExport('json')}>
          <FileCopyIcon style={{ marginRight: 8 }} />
          Export to JSON
        </MenuItem>
      </Menu>
      <div className="ag-theme-alpine compact-table" style={{ width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          pagination
          paginationPageSize={paginationPageSize}
          onGridReady={onGridReady}
          onFilterChanged={() => {
            gridApi && gridApi.paginationGoToFirstPage();
            gridColumnApi && autoSizeAllColumns(gridColumnApi); // Refit columns after filtering
          }} 
          defaultColDef={{
            resizable: true,
            sortable: true,
            filter: true,
            editable: true,
            clipboard: true, // Enable clipboard support
          }}
          suppressClipboardPaste={false}
          enableCellTextSelection={true} // Enable text selection for copy-paste
          domLayout='autoHeight' // Auto height based on content
          rowHeight={25} // Set a compact row height
          headerHeight={32} // Set a compact header height
        />
      </div>
      <div style={{ marginTop: '10px' }}>
        <span>
          Page{' '}
          <strong>
            {gridApi ? gridApi.paginationGetCurrentPage() + 1 : 1} of {gridApi ? gridApi.paginationGetTotalPages() : 1}
          </strong>
        </span>
        <select
          value={paginationPageSize}
          onChange={onPageSizeChanged}
          style={{ marginLeft: '10px' }}
        >
          {[10, 20, 30, 40, 50].map(pageSize => (
            <option key={pageSize} value={pageSize}>
              Show {pageSize}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default DynamicTable;


//based on size

import React, { useEffect, useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';
import { IconButton, Tooltip, CircularProgress, Typography } from '@mui/material';
import { Download as DownloadIcon } from '@mui/icons-material';
import './custom-styles.css'; // Import the custom CSS file

const DynamicTable = () => {
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        const fetchedData = response.data;
        setRowData(fetchedData);

        // Define column definitions
        const columns = Object.keys(fetchedData[0] || {}).map((key, index) => ({
          headerName: key || `Column ${index}`,
          field: key || `column_${index}`, // Field must be unique
          filter: true, // Enable filtering for this column
          width: headerNameToWidth[key] || 150, // Apply specific width if defined or default width
        }));

        setColumnDefs(columns);
        setLoading(false);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setError('Failed to load data. Please try again later.');
        setLoading(false);
      });
  }, []);

  const headerNameToWidth = {
    'Name': 200,
    'Username': 150,
    'Email': 250,
    // Add other columns with specific widths if needed
  };

  const onGridReady = (params) => {
    setGridApi(params.api);
    params.api.paginationSetPageSize(paginationPageSize);
  };

  const onPageSizeChanged = (event) => {
    const newPageSize = Number(event.target.value);
    setPaginationPageSize(newPageSize);
    if (gridApi) {
      gridApi.paginationSetPageSize(newPageSize);
      updateTableHeight(newPageSize);
    }
  };

  const updateTableHeight = (pageSize) => {
    const rowHeight = 25; // Adjust based on your row height
    const headerHeight = 32; // Adjust based on your header height
    const paginationControlsHeight = 52; // Adjust based on your pagination controls height
    const totalHeight = (pageSize * rowHeight) + headerHeight + paginationControlsHeight;
    document.querySelector('.ag-theme-alpine').style.height = `${totalHeight}px`;
  };

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <div>
      <Tooltip title="Export Data">
        <IconButton color="primary">
          <DownloadIcon />
        </IconButton>
      </Tooltip>
      <div className="ag-theme-alpine compact-table" style={{ width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          pagination
          paginationPageSize={paginationPageSize}
          onGridReady={onGridReady}
          defaultColDef={{
            resizable: true,
            sortable: true,
            filter: true,
            editable: true,
            clipboard: true, // Enable clipboard support
            width: 150, // Default column width
          }}
          suppressClipboardPaste={false}
          enableCellTextSelection={true} // Enable text selection for copy-paste
          domLayout='autoHeight' // Auto height based on content
          rowHeight={25} // Set a compact row height
          headerHeight={32} // Set a compact header height
        />
      </div>
      <div style={{ marginTop: '10px' }}>
        <span>
          Page{' '}
          <strong>
            {gridApi ? gridApi.paginationGetCurrentPage() + 1 : 1} of {gridApi ? gridApi.paginationGetTotalPages() : 1}
          </strong>
        </span>
        <select
          value={paginationPageSize}
          onChange={onPageSizeChanged}
          style={{ marginLeft: '10px' }}
        >
          {[10, 20, 30, 40, 50].map(pageSize => (
            <option key={pageSize} value={pageSize}>
              Show {pageSize}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default DynamicTable;