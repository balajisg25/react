import React, { useState, useEffect } from 'react';
import { AppBar, Toolbar, Tabs, Tab, Box, IconButton, Menu, MenuItem, styled } from '@mui/material';
import { AgGridReact } from 'ag-grid-react';
import axios from 'axios';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { FilterList as FilterListIcon, FileDownload as FileDownloadIcon } from '@mui/icons-material';

// Style for AppBar to have light background
const AppBarStyled = styled(AppBar)(({ theme }) => ({
  backgroundColor: '#f0f0f0', // Light background color
  boxShadow: 'none',
}));

const App = () => {
  const [tabValue, setTabValue] = useState('Tab 1');
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(10);
  const [totalRows, setTotalRows] = useState(0);
  const [anchorEl, setAnchorEl] = useState(null);

  useEffect(() => {
    fetchData(tabValue);
  }, [tabValue]);

  const fetchData = async (tabValue, page = 1) => {
    try {
      const response = await axios.post('/api/data', { tabValue, page, pageSize: paginationPageSize });
      const { data, totalRows } = response.data;
      setRowData(data);
      setTotalRows(totalRows);
      if (data.length > 0) {
        setColumnDefs(Object.keys(data[0]).map(key => ({
          headerName: key,
          field: key,
          filter: true,
          sortable: true,
          resizable: true,
        })));
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleExportClick = (format) => {
    let blob, filename;
    switch (format) {
      case 'csv':
        blob = new Blob([XLSX.utils.sheet_to_csv(XLSX.utils.json_to_sheet(rowData))], { type: 'text/csv' });
        filename = 'data.csv';
        break;
      case 'json':
        blob = new Blob([JSON.stringify(rowData, null, 2)], { type: 'application/json' });
        filename = 'data.json';
        break;
      case 'xlsx':
        const worksheet = XLSX.utils.json_to_sheet(rowData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
        blob = XLSX.write(workbook, { bookType: 'xlsx', type: 'blob' });
        filename = 'data.xlsx';
        break;
      default:
        return;
    }
    saveAs(blob, filename);
    setAnchorEl(null);
  };

  const handleClearFilters = () => {
    gridApi.setFilterModel(null);
    gridApi.onFilterChanged();
  };

  const handleMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  let gridApi;
  const onGridReady = params => {
    gridApi = params.api;
    params.api.sizeColumnsToFit();
  };

  return (
    <Box sx={{ width: '100%' }}>
      <AppBarStyled position="static">
        <Toolbar>
          <Tabs
            value={tabValue}
            onChange={handleTabChange}
            sx={{
              backgroundColor: '#f0f0f0', // Light background color for Tabs
              borderRadius: '8px',
              padding: '10px',
              '& .MuiTabs-indicator': {
                display: 'none', // Hide the default indicator
              },
            }}
          >
            <Tab label="Tab 1" value="Tab 1" />
            <Tab label="Tab 2" value="Tab 2" />
          </Tabs>
          <Box sx={{ flexGrow: 1 }} />
          <IconButton onClick={handleClearFilters} color="inherit">
            <FilterListIcon />
          </IconButton>
          <IconButton onClick={handleMenuClick} color="inherit">
            <FileDownloadIcon />
          </IconButton>
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleMenuClose}
          >
            <MenuItem onClick={() => handleExportClick('csv')}>Export as CSV</MenuItem>
            <MenuItem onClick={() => handleExportClick('json')}>Export as JSON</MenuItem>
            <MenuItem onClick={() => handleExportClick('xlsx')}>Export as XLSX</MenuItem>
          </Menu>
        </Toolbar>
      </AppBarStyled>
      <Box sx={{ padding: '20px' }}>
        <div className="ag-theme-alpine" style={{ height: 400, width: '100%', marginTop: '20px' }}>
          <AgGridReact
            rowData={rowData}
            columnDefs={columnDefs}
            onGridReady={onGridReady}
            pagination={true}
            paginationPageSize={paginationPageSize}
            domLayout='autoHeight'
            enableCellTextSelection={true}
            suppressPaginationPanel={false}
          />
        </div>
      </Box>
    </Box>
  );
};

export default App;