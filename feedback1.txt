import React, { useState } from 'react';
import {
  TextField,
  Box,
  Button,
  Rating,
  Typography,
  IconButton,
  Tooltip,
  Snackbar,
  Alert
} from '@mui/material';
import axios from 'axios';
import SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied';
import SentimentDissatisfiedIcon from '@mui/icons-material/SentimentDissatisfied';
import SentimentSatisfiedIcon from '@mui/icons-material/SentimentSatisfied';
import SentimentSatisfiedAltIcon from '@mui/icons-material/SentimentSatisfiedAlt';
import SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';

const FeedbackForm = () => {
  const [email, setEmail] = useState('');
  const [comments, setComments] = useState('');
  const [starRating, setStarRating] = useState(0);
  const [smileyRating, setSmileyRating] = useState(0);
  const [message, setMessage] = useState('');
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [errors, setErrors] = useState({});
  const maxCommentsLength = 200;

  const handleSmileyClick = (value) => {
    setSmileyRating(value);
  };

  const validate = () => {
    const newErrors = {};
    if (!comments) newErrors.comments = 'Comments are required';
    if (!starRating) newErrors.starRating = 'Star rating is required';
    if (!smileyRating) newErrors.smileyRating = 'Smiley rating is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;

    try {
      await axios.post('http://localhost:5000/api/feedback', {
        email,
        comments,
        starRating,
        smileyRating,
      });
      setMessage('Feedback submitted successfully!');
      setSnackbarSeverity('success');
      setOpenSnackbar(true);
      // Clear the form
      setEmail('');
      setComments('');
      setStarRating(0);
      setSmileyRating(0);
      setErrors({});
    } catch (error) {
      console.error('Error submitting feedback:', error);
      setMessage('Error submitting feedback. Please try again.');
      setSnackbarSeverity('error');
      setOpenSnackbar(true);
    }
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  return (
    <Box component="form" noValidate autoComplete="off" sx={{ maxWidth: 400, m: '0 auto', p: 2, border: '1px solid #ccc', borderRadius: 1 }} onSubmit={handleSubmit}>
      <Typography variant="h6" gutterBottom>
        Feedback Form
      </Typography>
      <TextField
        fullWidth
        label="Email (optional)"
        variant="outlined"
        margin="normal"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <TextField
        fullWidth
        label={`Comments (${comments.length}/${maxCommentsLength})`}
        variant="outlined"
        margin="normal"
        multiline
        rows={4}
        inputProps={{ maxLength: maxCommentsLength }}
        value={comments}
        onChange={(e) => setComments(e.target.value)}
        error={!!errors.comments}
        helperText={errors.comments}
      />
      <Box sx={{ my: 2 }}>
        <Typography component="legend">Star Rating</Typography>
        <Rating
          name="star-rating"
          value={starRating}
          onChange={(event, newValue) => setStarRating(newValue)}
        />
        {errors.starRating && (
          <Typography variant="caption" color="error">
            {errors.starRating}
          </Typography>
        )}
      </Box>
      <Box sx={{ my: 2 }}>
        <Typography component="legend">Smiley Rating</Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2 }}>
          <Tooltip title="Very Dissatisfied">
            <IconButton onClick={() => handleSmileyClick(1)} color={smileyRating === 1 ? 'primary' : 'default'}>
              <SentimentVeryDissatisfiedIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Dissatisfied">
            <IconButton onClick={() => handleSmileyClick(2)} color={smileyRating === 2 ? 'primary' : 'default'}>
              <SentimentDissatisfiedIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Neutral">
            <IconButton onClick={() => handleSmileyClick(3)} color={smileyRating === 3 ? 'primary' : 'default'}>
              <SentimentSatisfiedIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Satisfied">
            <IconButton onClick={() => handleSmileyClick(4)} color={smileyRating === 4 ? 'primary' : 'default'}>
              <SentimentSatisfiedAltIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Very Satisfied">
            <IconButton onClick={() => handleSmileyClick(5)} color={smileyRating === 5 ? 'primary' : 'default'}>
              <SentimentVerySatisfiedIcon />
            </IconButton>
          </Tooltip>
        </Box>
        {errors.smileyRating && (
          <Typography variant="caption" color="error">
            {errors.smileyRating}
          </Typography>
        )}
      </Box>
      <Button type="submit" variant="contained" color="primary" fullWidth>
        Submit
      </Button>
      <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert onClose={handleCloseSnackbar} severity={snackbarSeverity} sx={{ width: '100%' }}>
          {message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default FeedbackForm;