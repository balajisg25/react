import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Box,
  TablePagination,
  TableSortLabel,
  Typography,
  IconButton,
  Menu,
  MenuItem,
  FormControlLabel,
  Checkbox,
  Toolbar,
  Button
} from '@mui/material';
import FilterListIcon from '@mui/icons-material/FilterList';
import ClearIcon from '@mui/icons-material/Clear';
import MoreVertIcon from '@mui/icons-material/MoreVert';

const DynamicTableWithFilterAndPagination = () => {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [columns, setColumns] = useState([]);
  const [filters, setFilters] = useState({});
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [anchorEl, setAnchorEl] = useState(null);
  const [hiddenColumns, setHiddenColumns] = useState({});
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'asc' });

  useEffect(() => {
    axios.get('https://api.example.com/data') // Replace with your API endpoint
      .then(response => {
        if (response.data.length > 0) {
          setData(response.data);
          setFilteredData(response.data);
          setColumns(Object.keys(response.data[0]));
          const initialFilters = Object.keys(response.data[0]).reduce((acc, key) => {
            acc[key] = '';
            return acc;
          }, {});
          setFilters(initialFilters);
          const initialHiddenColumns = Object.keys(response.data[0]).reduce((acc, key) => {
            acc[key] = false;
            return acc;
          }, {});
          setHiddenColumns(initialHiddenColumns);
        }
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, []);

  const handleFilterChange = (column, value) => {
    setFilters(prevFilters => ({
      ...prevFilters,
      [column]: value
    }));
  };

  const handleClearFilters = () => {
    const clearedFilters = Object.keys(filters).reduce((acc, key) => {
      acc[key] = '';
      return acc;
    }, {});
    setFilters(clearedFilters);
  };

  useEffect(() => {
    let filtered = data;
    for (const column in filters) {
      if (filters[column]) {
        filtered = filtered.filter(row =>
          row[column].toString().toLowerCase().includes(filters[column].toLowerCase())
        );
      }
    }
    if (sortConfig.key) {
      filtered.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }
    setFilteredData(filtered);
    setPage(0); // Reset to the first page whenever filters or sorting change
  }, [filters, sortConfig, data]);

  const formatHeader = (header) => {
    return header.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleSort = (column) => {
    let direction = 'asc';
    if (sortConfig.key === column && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key: column, direction });
  };

  const handleMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleToggleColumn = (column) => {
    setHiddenColumns(prevState => ({
      ...prevState,
      [column]: !prevState[column]
    }));
  };

  return (
    <Box>
      <Toolbar>
        <Button onClick={handleClearFilters} startIcon={<ClearIcon />}>
          Clear Filters
        </Button>
        <IconButton onClick={handleMenuClick}>
          <MoreVertIcon />
        </IconButton>
        <Menu
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={handleMenuClose}
        >
          {columns.map((column, index) => (
            <MenuItem key={index}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={!hiddenColumns[column]}
                    onChange={() => handleToggleColumn(column)}
                  />
                }
                label={formatHeader(column)}
              />
            </MenuItem>
          ))}
        </Menu>
      </Toolbar>
      <TableContainer component={Paper}>
        <Table size="small">
          <TableHead>
            <TableRow>
              {columns.map((column, index) => (
                !hiddenColumns[column] && (
                  <TableCell key={index}>
                    <Box display="flex" flexDirection="column">
                      <TableSortLabel
                        active={sortConfig.key === column}
                        direction={sortConfig.direction}
                        onClick={() => handleSort(column)}
                        IconComponent={FilterListIcon}
                      >
                        {formatHeader(column)}
                      </TableSortLabel>
                      <TextField
                        variant="outlined"
                        size="small"
                        value={filters[column]}
                        onChange={(e) => handleFilterChange(column, e.target.value)}
                        label={formatHeader(column)}
                        style={{ marginTop: '8px' }}
                      />
                    </Box>
                  </TableCell>
                )
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, rowIndex) => (
              <TableRow key={rowIndex}>
                {columns.map((column, colIndex) => (
                  !hiddenColumns[column] && (
                    <TableCell key={colIndex}>{row[column]}</TableCell>
                  )
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        component="div"
        count={filteredData.length}
        page={page}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        rowsPerPageOptions={[5, 10, 25]}
        labelDisplayedRows={({ from, to, count }) => `${from}-${to} of ${count} records`}
      />
    </Box>
  );
};

export default DynamicTableWithFilterAndPagination;