import React, { useEffect, useState, useCallback } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { FaFileCsv, FaFileExcel, FaFileAlt, FaDownload } from 'react-icons/fa';

const DynamicTable = () => {
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [gridApi, setGridApi] = useState(null);

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        const fetchedData = response.data;
        setRowData(fetchedData);

        const columns = Object.keys(fetchedData[0] || {}).map((key, index) => ({
          headerName: key || `Column ${index}`,
          field: key || `column_${index}`, // Field must be unique
          filter: true, // Enable filtering for this column
        }));

        setColumnDefs(columns);
      });
  }, []);

  const onGridReady = (params) => {
    setGridApi(params.api);
    // Update pagination on load
    updatePagination(params.api);
  };

  const updatePagination = (api) => {
    const totalCount = api.getDisplayedRowCount();
    const totalPages = Math.ceil(totalCount / paginationPageSize);
    setTotalPages(totalPages);
    setCurrentPage(api.paginationGetCurrentPage() + 1); // 1-based page number
  };

  const onPaginationChanged = (event) => {
    const api = event.api;
    updatePagination(api);
  };

  const onFilterChanged = useCallback(() => {
    if (gridApi) {
      updatePagination(gridApi);
    }
  }, [gridApi]);

  const onPageSizeChanged = (event) => {
    const newPageSize = Number(event.target.value);
    setPaginationPageSize(newPageSize);
    if (gridApi) {
      gridApi.paginationSetPageSize(newPageSize);
      updatePagination(gridApi);
    }
  };

  const exportToCSV = () => {
    const csv = Papa.unparse(rowData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'data.csv');
  };

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(rowData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Data');
    XLSX.writeFile(wb, 'data.xlsx');
  };

  const exportToJson = () => {
    const json = JSON.stringify(rowData, null, 2);
    const blob = new Blob([json], { type: 'application/json;charset=utf-8;' });
    saveAs(blob, 'data.json');
  };

  return (
    <div>
      <div style={{ marginBottom: '10px' }}>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer', marginRight: '10px' }}
          onClick={exportToCSV}
          title="Export to CSV"
        >
          <FaFileCsv size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer', marginRight: '10px' }}
          onClick={exportToExcel}
          title="Export to Excel"
        >
          <FaFileExcel size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
        <div
          style={{ display: 'inline-flex', alignItems: 'center', cursor: 'pointer' }}
          onClick={exportToJson}
          title="Export to JSON"
        >
          <FaFileAlt size={30} />
          <FaDownload size={15} style={{ marginLeft: '5px' }} />
        </div>
      </div>
      <div className="ag-theme-alpine" style={{ height: '400px', width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          pagination
          paginationPageSize={paginationPageSize}
          onGridReady={onGridReady}
          onPaginationChanged={onPaginationChanged}
          onFilterChanged={onFilterChanged}
        />
      </div>
      <div style={{ marginTop: '10px' }}>
        <button
          onClick={() => gridApi && gridApi.paginationGoToFirstPage()}
          disabled={currentPage === 1}
        >
          {'<<'}
        </button>
        <button
          onClick={() => gridApi && gridApi.paginationGoToPreviousPage()}
          disabled={currentPage === 1}
        >
          {'<'}
        </button>
        <button
          onClick={() => gridApi && gridApi.paginationGoToNextPage()}
          disabled={currentPage === totalPages}
        >
          {'>'}
        </button>
        <button
          onClick={() => gridApi && gridApi.paginationGoToLastPage()}
          disabled={currentPage === totalPages}
        >
          {'>>'}
        </button>
        <span>
          Page{' '}
          <strong>
            {currentPage} of {totalPages}
          </strong>
        </span>
        <select
          value={paginationPageSize}
          onChange={onPageSizeChanged}
        >
          {[10, 20, 30, 40, 50].map(pageSize => (
            <option key={pageSize} value={pageSize}>
              Show {pageSize}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default DynamicTable;